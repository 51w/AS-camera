/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <com_eegsmart_imagetransfer_jni_PreviewJNI.h>
#include "player.h"
#include "h264tojpg.h"
#include "string.h"
//#include "h264tomp4.h"
/* Header for class com_allwinner_imagetransfer_jni_PreviewJNI */
//#define  WIDTH 1280
//#define  HEIGHT 720
#define  QUALITY 90
#ifdef __cplusplus
extern "C" {
#endif

/*
 * Class:     com_eegsmart_imagetransfer_jni_PreviewJNI
 * Method:    init
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_eegsmart_imagetransfer_jni_PreviewJNI_init(
		JNIEnv *jEnv, jclass jCls, jstring serverIP) {
	init(jEnv, jCls, serverIP);
}

/*
 * Class:     com_allwinner_imagetransfer_jni_PreviewJNI
 * Method:    shutDown
 * Signature: ()V
 */JNIEXPORT void JNICALL Java_com_eegsmart_imagetransfer_jni_PreviewJNI_shutDown(
		JNIEnv *jEnv, jclass jCls) {
	shutDown();
}
bool isTakingPicture = false;

int isDelay = 0;
int count = 0;

/*
 * Class:     com_allwinner_imagetransfer_jni_PreviewJNI
 * Method:    takePictrue
 * Signature: ([BLjava/lang/String;)V
 */JNIEXPORT jboolean JNICALL Java_com_eegsmart_imagetransfer_jni_PreviewJNI_takePicture(
		JNIEnv *env, jclass jCls, jstring path) {
	//GetStringUTFChars
	isTakingPicture = true;

	// LOG
	const char *nativePath = env->GetStringUTFChars(path, JNI_FALSE);
	while (getSecondSize() == 0) {
		usleep(5 * 1000);	//微秒
	}
	//setTake(1);
	count = 0;
	isDelay=0;
	while( getInitKeying()){
	    usleep(10 * 1000);	//微秒
	}
	int result=-1;
	if (isDelay||true) {
		result = saveToJpg(getKeyBuffer(), getKeySize(), getFirstBuffer(),
				getFirstSize(), getSecondBuffer(), getSecondSize(),
				getSpropRecords(), nativePath, getVideoWidth(), getVideoHeight());
	} else {
		result = saveToJpg(getJpgBuffer(), getJpgSize(), getFirstBuffer(),
				getFirstSize(), getSecondBuffer(), getSecondSize(),
				getSpropRecords(), nativePath, getVideoWidth(), getVideoHeight());
	}
	env->ReleaseStringUTFChars(path, nativePath);

	isTakingPicture = false;
	return result==0 ? true: false;
}
JNIEXPORT jboolean JNICALL Java_com_eegsmart_imagetransfer_jni_PreviewJNI_isTakingPicture(
		JNIEnv *jEnv, jclass jCls) {
	return isTakingPicture;
}
/*
 * Class:     com_allwinner_imagetransfer_jni_PreviewJNI
 * Method:    recordStart
 * Signature: (Ljava/lang/String;)Z
 */JNIEXPORT jboolean JNICALL Java_com_eegsmart_imagetransfer_jni_PreviewJNI_recordStart(
		JNIEnv *env, jclass jCls, jstring path) {
	const char *nativePath = env->GetStringUTFChars(path, JNI_FALSE);
	bool result = initMp4(nativePath, getSpsBuffer(), getSpsSize(), getPpsBuffer(), getPpsSize(), getVideoWidth(), getVideoHeight());
	env->ReleaseStringUTFChars(path, nativePath);
	if (result) {
		setRecord(1);
	}
	return result;
}

/*
 * Class:     com_allwinner_imagetransfer_jni_PreviewJNI
 * Method:    recording
 * Signature: ()Z
 */JNIEXPORT jboolean JNICALL Java_com_eegsmart_imagetransfer_jni_PreviewJNI_recording(
		JNIEnv *env, jclass jCls) {
	LOGE("_sps  isRecording %d:",(recording() ?0 : 1));
	return (jboolean) (recording() ? 0 : 1);
}

/*
 * Class:     com_allwinner_imagetransfer_jni_PreviewJNI
 * Method:    recordStop
 * Signature: ()V
 */JNIEXPORT void JNICALL Java_com_eegsmart_imagetransfer_jni_PreviewJNI_recordStop(
		JNIEnv *env, jclass jCls) {
	setRecord(0);
	closeMp4();
}


/*
 * Class:     com_allwinner_imagetransfer_jni_PreviewJNI
 * Method:    recording
 * Signature: ()Z
 */JNIEXPORT void JNICALL Java_com_eegsmart_imagetransfer_jni_PreviewJNI_setDecodeFrame(
		JNIEnv *env, jclass jCls, jboolean isDecodeFrame) {
	if(isDecodeFrame) {
		setDecodeFrame(1);
	}
	else {
		setDecodeFrame(0);
	}
}

#ifdef __cplusplus
}
#endif
